#!/bin/sh


help()
{
cat <<EOF
USAGE:

numcxx-build  [flags] file_1 ... file_n 

Compile C and C++ source files, link them together and with the numcxx
library.   It  assumes  that  only  of the  files  contains  a  main()
function.

The script  by default detects  an outputname  as the basename  of the
first  file given  on  the command  line. With  --output,  this can  be
overidden.

Then, the  script creates  a CMakeLists.txt  file in  the subdirectory
numcxx.build/<outputname>,  configures  the  project for  an  out  of
source debug or  release build and invokes the build,  resulting in an
executable <outputname> in the present directory.

If --execute is given, the executable <outputname> is started.

Alternatively, if --codeblocks is on  the command line, a subdirectory
<outputname>.codeblocks  is  created  which  contains  the  codeblocks
project file  <outputname>.cbp. In this  case, if --execute  is given,
codeblocks is  started with this  project file. A  target <outputname>
will be available in the codeblocks GUI.


FLAGS:

            -b, --codeblocks: configure codeblocks project
                     --clean: remove all subdirectories created by numcxx
                              (including codeblocks projects)
                --cxx <name>: Set c++ compiler. 
                              Same as CXX=<name> numcxx-build ... 
             -d, -g, --debug: generate code with debug information
                  -h, --help: this help
  -o <name>, --output <name>: specifiy output file name. 
                              Default: basename of first source file
                 -r, --reset: reset build directory
               -v, --verbose: verbose execution
               -x, --execute: run after build

EXAMPLES:

Assume  hello.cxx and sub.cxx are  c++ files in the current directory.

1. Compile and link, run separately
 
  $ numcxx-build  hello.cxx sub.cxx
  $ ./hello

2. Compile, link and run directly:

  $ numcxx-build --execute hello.cxx sub.cxx

3. Setup codeblocks project and start codeblocks separately

  $ numcxx-build  --codeblocks hello.cxx sub.cxx
  $ codeblocks hello.codeblocks/hello.cbp

4. Setup codeblocks project and start codeblocks directly

  $ numcxx-build  --codeblocks  --execute hello.cxx sub.cxx

(c) 2017 J. Fuhrmann
EOF


}

#
# https://stackoverflow.com/a/40554323
#
# Assume numcxx-build is installed in somewhere/bin, we can 
# find NUMCXXConfig.cmake using this information
# 
numcxx_root=`dirname $0 | while read a; do cd $a && pwd && break; done`


# this directory
thisdir=$PWD



# analyze command line arguments
until test $# = 0 ; do
    case $1 in
	-d | -g| --debug) debug=1 ; shift
 	    ;;
	-h | --help)  help | more; exit
	    ;;
	-o | --output) output=$2 ; shift ; shift
 	    ;;
	-r | --reset) doreset=1 ; shift 
            ;;
	-b | --codeblocks) codeblocks=1 ; shift 
 	    ;;
	-v | --verbose) verbose=1 ; shift
            ;;
	-x | --execute) execute=1 ; shift
            ;;
        --clean) rm -rfv numcxx.build *.codeblocks ; exit $?
            ;;
	--cxx)  CXX=$2; shift; shift;
 	    ;;
 	*) if test -f $1; then 
              # positional arguments are assumed to be source files
              # we compile a list of them
              files="$files $thisdir/$1" 
              # if output is emtpy, detect it from filename.
              if test x$output = x ; then
                  output=`basename  $1 | cut -f1 -d.`
              fi
            else 
              echo "Missing input file $1 or command line syntax error"; 
            exit 1; 
            fi; shift
    esac
done


#
# Make CXX available in the environment of the cmake process
#
export CXX

#
# Create the cmake dir
#
cmakedir=$PWD/numcxx.build/$output

mkdir -p $cmakedir

if test  -z "$files"  ; then
    echo Missing list of input files
    help
    exit
fi


#
# Decide debug or release and
# set the build directories accordingly
#
if test x$debug != x; then
    CMAKE_BUILD_TYPE=DEBUG
    build=$cmakedir/debug
else
    CMAKE_BUILD_TYPE=RELEASE
    build=$cmakedir/release
fi

#
# Choose a different subdirectory if a codeblocks
# project is to be created
#
if test x$codeblocks != x; then
    build=$thisdir.$output.codeblocks
fi

rundate=`date +%Y-%m-%d-%H%M`

#
# Create the CMakeLists.txt
#
cat> $cmakedir/CMakeLists.txt <<EOF
#
# automagically created by numcxx-build $rundate
#
cmake_minimum_required(VERSION 2.8.12)

PROJECT($output C CXX)

find_package(NUMCXX REQUIRED PATHS "$numcxx_root/../;$numcxx_root/../.build")

include_directories("\${NUMCXX_INCLUDE_DIRS}")
link_libraries("\${NUMCXX_LIBRARIES}")

find_package(VTKFIG PATHS "$numcxx_root/../;$numcxx_root/../../vtkfig/.build")

if (VTKFIG_FOUND)
  add_definitions(-DVTKFIG=1)
  include_directories("\${VTKFIG_INCLUDE_DIRS}")
  link_libraries("\${VTKFIG_LIBRARIES}")
endif()

if (CMAKE_BUILD_TYPE STREQUAL "DEBUG")

  add_definitions("-DNUMCXX_CHECK_BOUNDS")

endif()

add_executable($output $files)

message(STATUS "")
message(STATUS "numcxx installation: \${NUMCXX_CMAKE_DIR}")
message(STATUS "")
EOF

#
# Print CMakelists.txt for debug purposes
#
if test x$verbose != x ; then
    echo \---- CMakeLists.txt ----
    cat $cmakedir/CMakeLists.txt
    echo \------------------------
fi

#
# Reset build system by removing the build directory
#
if test  x$doreset != x ; then
    if  test -d $build; then
        rm -r $build
        if test x$verbose != x ; then
            echo numcxx-build: Removed build directory $build
        fi
    fi
fi


#
# If build directory does not exist, create it and configure the
# build system with cmake
#
if ! test -d $build; then
    mkdir -p $build
    cd $build
    if test x$codeblocks != x; then
        #
        # Setup for codeblocks, start codeblocks or exit
        #
        CXXFLAGS="-std=c++11 $CXXFLAGS" cmake -G"CodeBlocks - Unix Makefiles" $cmakedir
        cat <<EOF

Created codeblocks project in $build.

To load the project, run

   \$ codeblocks $build/$output.cbp

Once started, change "all" in the target selection box to $output.
After that, you can build and run the project.

EOF
        if test x$execute != x ; then
            cd $thisdir
            exec codeblocks $build/$output.cbp -ns
        fi
        exit
    else
        #
        # Default configuration: continue with standard cmake procedure
        #
        CXXFLAGS="-std=c++11 $CXXFLAGS" cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE $cmakedir
    fi
    cd $thisdir
    if test x$verbose != x ; then
        echo numcxx-build: Created build directory $build
    fi
fi

#
# Set VERBOSE environment variable. This is understood
# by the cmake generated Makefile in the build directory
#
if test x$verbose != x ; then
    VERBOSE=1
    export VERBOSE
fi

#
# Run the build
#
if ! cmake --build $build ; then
    echo
    echo numcxx-build: compilation error
    exit 1
fi
    
if test x$verbose != x ; then
    echo numcxx-build: Built $output 
fi

#
# Copy the executable to the working directory
#
cp -p $build/$output $output
if test x$verbose != x ; then
    echo numcxx-build: Copied $output from build directory  $build to $thisdir
fi

#
# List executable file with date
#
echo
ls -l $output
echo  

#
# Run
#
if test x$execute != x ; then
    exec ./$output
fi


